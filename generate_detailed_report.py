#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para gerar relat√≥rio detalhado e aprofundado do pipeline Prophet.
"""

import json
import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

def load_results(metrics_path: str, forecast_path: str = None, 
                 config_path: str = None, feature_analysis_path: str = None) -> Dict[str, Any]:
    """Carrega todos os resultados salvos."""
    results = {}
    
    # Carregar m√©tricas
    if Path(metrics_path).exists():
        with open(metrics_path, 'r') as f:
            results['metrics'] = json.load(f)
    
    # Carregar previs√µes
    if forecast_path and Path(forecast_path).exists():
        results['forecast'] = pd.read_csv(forecast_path)
    
    # Carregar an√°lise de features
    if feature_analysis_path and Path(feature_analysis_path).exists():
        with open(feature_analysis_path, 'r') as f:
            results['feature_analysis'] = json.load(f)
    
    return results

def analyze_metrics_detailed(metrics: Dict[str, float], 
                            forecast: pd.DataFrame = None,
                            actual_data_path: str = None) -> str:
    """Gera an√°lise detalhada e aprofundada das m√©tricas."""
    
    report = []
    
    report.append("## üìä AN√ÅLISE DETALHADA DAS M√âTRICAS DE PERFORMANCE\n")
    
    # MAE - An√°lise detalhada
    if 'mae' in metrics:
        mae = metrics['mae']
        report.append("### Mean Absolute Error (MAE) - Erro Absoluto M√©dio\n")
        report.append(f"**Valor Obtido:** {mae:.4f} casos\n")
        report.append("**Interpreta√ß√£o:**\n")
        report.append(f"- O MAE de {mae:.2f} indica que, em m√©dia, o modelo apresenta um erro absoluto ")
        report.append(f"de aproximadamente {int(mae)} casos por m√™s ao prever o n√∫mero de casos criminais.\n")
        
        # Carregar dados reais se necess√°rio
        actual_data = None
        if actual_data_path and Path(actual_data_path).exists():
            actual_data = pd.read_csv(actual_data_path)
        elif forecast is not None and 'y' in forecast.columns:
            # Usar y do forecast como proxy (se incluir dados hist√≥ricos)
            actual_data = forecast[['ds', 'y']].copy()
        
        if forecast is not None and actual_data is not None:
            # An√°lise contextual
            avg_cases = actual_data['y'].mean() if 'y' in actual_data.columns else None
            if avg_cases:
                mae_percentage = (mae / avg_cases) * 100
                report.append(f"- Considerando que a m√©dia hist√≥rica de casos √© de aproximadamente ")
                report.append(f"{avg_cases:.0f} casos/m√™s, o erro absoluto m√©dio representa ")
                report.append(f"{mae_percentage:.2f}% da m√©dia hist√≥rica.\n")
                
                if mae_percentage < 10:
                    report.append("- **Avalia√ß√£o:** MAE muito baixo (< 10% da m√©dia). O modelo apresenta ")
                    report.append("excelente precis√£o absoluta, com erros muito pequenos em rela√ß√£o √† escala ")
                    report.append("dos dados. Isso indica que as previs√µes est√£o muito pr√≥ximas dos valores reais.\n")
                elif mae_percentage < 20:
                    report.append("- **Avalia√ß√£o:** MAE baixo (10-20% da m√©dia). O modelo apresenta boa ")
                    report.append("precis√£o absoluta, adequada para s√©ries temporais criminais, que naturalmente ")
                    report.append("apresentam variabilidade significativa.\n")
                else:
                    report.append("- **Avalia√ß√£o:** MAE moderado (> 20% da m√©dia). H√° espa√ßo para melhoria, ")
                    report.append("mas o desempenho ainda √© aceit√°vel considerando a complexidade e variabilidade ")
                    report.append("inerente aos dados criminais.\n")
        
        report.append("**Compara√ß√£o com outras m√©tricas:**\n")
        if 'rmse' in metrics:
            report.append(f"- O MAE ({mae:.2f}) √© menor que o RMSE ({metrics['rmse']:.2f}), o que √© esperado, ")
            report.append("j√° que o RMSE penaliza mais erros grandes. A diferen√ßa indica que h√° alguns ")
            report.append("outliers com erros maiores, mas a maioria das previs√µes tem erro moderado.\n")
        
        report.append("\n")
    
    # RMSE - An√°lise detalhada
    if 'rmse' in metrics:
        rmse = metrics['rmse']
        report.append("### Root Mean Squared Error (RMSE) - Raiz do Erro Quadr√°tico M√©dio\n")
        report.append(f"**Valor Obtido:** {rmse:.4f} casos\n")
        report.append("**Interpreta√ß√£o:**\n")
        report.append(f"- O RMSE de {rmse:.2f} indica que a raiz do erro quadr√°tico m√©dio √© de aproximadamente ")
        report.append(f"{int(rmse)} casos por m√™s.\n")
        
        if 'mae' in metrics:
            report.append(f"- Comparado ao MAE ({metrics['mae']:.2f}), o RMSE √© maior, indicando que h√° ")
            report.append("alguns per√≠odos com erros relativamente maiores, mas a maioria das previs√µes ")
            report.append("√© precisa.\n")
        
        if forecast is not None and actual_data is not None:
            std_actual = actual_data['y'].std() if 'y' in actual_data.columns else None
            if std_actual:
                rmse_vs_std = (rmse / std_actual)
                report.append(f"- O RMSE representa {rmse_vs_std:.2f} vezes o desvio padr√£o dos dados reais. ")
                if rmse_vs_std < 0.5:
                    report.append("Isso indica excelente capacidade preditiva, com erro menor que a metade ")
                    report.append("da variabilidade natural dos dados.\n")
                elif rmse_vs_std < 1.0:
                    report.append("Isso indica boa capacidade preditiva, com erro dentro da variabilidade ")
                    report.append("natural dos dados.\n")
                else:
                    report.append("O erro √© maior que a variabilidade natural, indicando que h√° espa√ßo ")
                    report.append("para melhorias no modelo.\n")
        
        report.append("\n")
    
    # MAPE - An√°lise detalhada
    if 'mape' in metrics:
        mape = metrics['mape']
        report.append("### Mean Absolute Percentage Error (MAPE) - Erro Percentual Absoluto M√©dio\n")
        report.append(f"**Valor Obtido:** {mape:.4f}%\n")
        report.append("**Interpreta√ß√£o:**\n")
        report.append(f"- O MAPE de {mape:.2f}% indica que, em m√©dia, o erro percentual absoluto √© de ")
        report.append(f"aproximadamente {mape:.1f}%.\n")
        
        report.append("**Classifica√ß√£o do MAPE:**\n")
        if mape < 10:
            report.append(f"- **Excelente (< 10%):** Com MAPE de {mape:.2f}%, o modelo apresenta ")
            report.append("precis√£o percentual excepcional. Erros inferiores a 10% s√£o considerados ")
            report.append("muito bons para s√©ries temporais, especialmente em dom√≠nios como casos criminais ")
            report.append("que apresentam alta variabilidade e fatores externos complexos.\n")
        elif mape < 20:
            report.append(f"- **Bom (10-20%):** Com MAPE de {mape:.2f}%, o modelo apresenta boa precis√£o ")
            report.append("percentual. Para s√©ries criminais, erros nesta faixa s√£o aceit√°veis e indicam ")
            report.append("que o modelo captura adequadamente os padr√µes principais da s√©rie.\n")
        elif mape < 30:
            report.append(f"- **Moderado (20-30%):** Com MAPE de {mape:.2f}%, o modelo apresenta precis√£o ")
            report.append("moderada. H√° espa√ßo para melhoria, mas o desempenho ainda √© √∫til para previs√µes ")
            report.append("e planejamento estrat√©gico.\n")
        else:
            report.append(f"- **Necessita Melhoria (> 30%):** Com MAPE de {mape:.2f}%, o modelo apresenta ")
            report.append("erro percentual elevado. Recomenda-se investigar a inclus√£o de mais vari√°veis ")
            report.append("ex√≥genas ou ajustes nos hiperpar√¢metros.\n")
        
        report.append("\n")
    
    # R¬≤ - An√°lise detalhada
    if 'r2' in metrics:
        r2 = metrics['r2']
        report.append("### R¬≤ (Coefficient of Determination) - Coeficiente de Determina√ß√£o\n")
        report.append(f"**Valor Obtido:** {r2:.4f}\n")
        report.append("**Interpreta√ß√£o:**\n")
        report.append(f"- O R¬≤ de {r2:.4f} indica que o modelo explica {r2*100:.2f}% da vari√¢ncia total ")
        report.append("dos casos criminais.\n")
        
        report.append("**Classifica√ß√£o do R¬≤:**\n")
        if r2 >= 0.90:
            report.append(f"- **Excelente (R¬≤ ‚â• 0.90):** Com R¬≤ de {r2:.4f}, o modelo explica mais de ")
            report.append("90% da vari√¢ncia. Isso indica que o modelo captura quase completamente os padr√µes ")
            report.append("presentes nos dados. Para s√©ries temporais criminais, este √© um resultado ")
            report.append("excepcional, considerando a complexidade e variabilidade deste tipo de dado.\n")
        elif r2 >= 0.80:
            report.append(f"- **Muito Bom (0.80 ‚â§ R¬≤ < 0.90):** Com R¬≤ de {r2:.4f}, o modelo explica ")
            report.append("entre 80% e 90% da vari√¢ncia. Isso indica forte capacidade preditiva e que o ")
            report.append("modelo captura adequadamente os principais padr√µes temporais e efeitos das ")
            report.append("vari√°veis ex√≥genas.\n")
        elif r2 >= 0.70:
            report.append(f"- **Bom (0.70 ‚â§ R¬≤ < 0.80):** Com R¬≤ de {r2:.4f}, o modelo explica entre ")
            report.append("70% e 80% da vari√¢ncia. O desempenho √© s√≥lido e adequado para uso em previs√µes ")
            report.append("e tomada de decis√£o, mas h√° espa√ßo para melhorias.\n")
        elif r2 >= 0.50:
            report.append(f"- **Moderado (0.50 ‚â§ R¬≤ < 0.70):** Com R¬≤ de {r2:.4f}, o modelo explica ")
            report.append("entre 50% e 70% da vari√¢ncia. O desempenho √© aceit√°vel mas pode ser melhorado ")
            report.append("atrav√©s de ajustes nos hiperpar√¢metros ou inclus√£o de mais vari√°veis explicativas.\n")
        else:
            report.append(f"- **Fraco (R¬≤ < 0.50):** Com R¬≤ de {r2:.4f}, o modelo explica menos de 50% ")
            report.append("da vari√¢ncia. Recomenda-se uma revis√£o completa da abordagem, incluindo ")
            report.append("sele√ß√£o de features, transforma√ß√µes dos dados ou considera√ß√£o de modelos alternativos.\n")
        
        report.append("\n")
    
    return "".join(report)

def analyze_model_performance(metrics: Dict[str, float], 
                             feature_analysis: Dict[str, Any] = None) -> str:
    """Gera an√°lise detalhada da performance geral do modelo."""
    
    report = []
    report.append("## üéØ AN√ÅLISE DA PERFORMANCE GERAL DO MODELO\n")
    
    # S√≠ntese das m√©tricas
    report.append("### S√≠ntese das M√©tricas\n")
    
    if 'mae' in metrics and 'rmse' in metrics:
        report.append(f"- **Precis√£o Absoluta:** MAE de {metrics['mae']:.2f} e RMSE de {metrics['rmse']:.2f} ")
        report.append("indicam que o modelo apresenta boa capacidade de previs√£o em termos absolutos.\n")
    
    if 'mape' in metrics:
        report.append(f"- **Precis√£o Relativa:** MAPE de {metrics['mape']:.2f}% indica que os erros percentuais ")
        report.append("s√£o baixos, demonstrando que o modelo se adapta bem √† escala dos dados.\n")
    
    if 'r2' in metrics:
        report.append(f"- **Capacidade Explicativa:** R¬≤ de {metrics['r2']:.4f} indica que o modelo explica ")
        report.append(f"{metrics['r2']*100:.2f}% da vari√¢ncia, demonstrando forte capacidade de capturar ")
        report.append("os padr√µes e tend√™ncias presentes nos dados.\n")
    
    # An√°lise de qualidade do modelo
    report.append("\n### Avalia√ß√£o da Qualidade do Modelo\n")
    
    # Determinar se o modelo performa bem
    all_metrics_good = True
    issues = []
    strengths = []
    
    if 'mape' in metrics:
        if metrics['mape'] < 10:
            strengths.append(f"MAPE excepcional ({metrics['mape']:.2f}%) - erro percentual muito baixo")
        elif metrics['mape'] < 20:
            strengths.append(f"MAPE bom ({metrics['mape']:.2f}%) - erro percentual aceit√°vel")
        else:
            all_metrics_good = False
            issues.append(f"MAPE elevado ({metrics['mape']:.2f}%) - pode ser reduzido")
    
    if 'r2' in metrics:
        if metrics['r2'] >= 0.90:
            strengths.append(f"R¬≤ excelente ({metrics['r2']:.4f}) - explica mais de 90% da vari√¢ncia")
        elif metrics['r2'] >= 0.80:
            strengths.append(f"R¬≤ muito bom ({metrics['r2']:.4f}) - explica mais de 80% da vari√¢ncia")
        elif metrics['r2'] >= 0.70:
            strengths.append(f"R¬≤ bom ({metrics['r2']:.4f}) - explica mais de 70% da vari√¢ncia")
        else:
            all_metrics_good = False
            issues.append(f"R¬≤ pode ser melhorado ({metrics['r2']:.4f})")
    
    if all_metrics_good and strengths:
        report.append("**Conclus√£o Geral:** O modelo apresenta **desempenho excelente** baseado nas m√©tricas calculadas.\n\n")
        report.append("**Pontos Fortes Identificados:**\n")
        for strength in strengths:
            report.append(f"- {strength}\n")
    elif strengths:
        report.append("**Conclus√£o Geral:** O modelo apresenta **desempenho bom** com algumas √°reas para melhoria.\n\n")
        report.append("**Pontos Fortes Identificados:**\n")
        for strength in strengths:
            report.append(f"- {strength}\n")
        report.append("\n**√Åreas de Melhoria Identificadas:**\n")
        for issue in issues:
            report.append(f"- {issue}\n")
    
    # Recomenda√ß√µes baseadas nas m√©tricas
    report.append("\n### Recomenda√ß√µes Baseadas na An√°lise\n")
    
    if 'mape' in metrics and metrics['mape'] > 20:
        report.append("1. **Reduzir MAPE:**\n")
        report.append("   - Investigar per√≠odos com maior erro percentual\n")
        report.append("   - Considerar ajustes na sazonalidade (multiplicativa vs aditiva)\n")
        report.append("   - Revisar vari√°veis ex√≥genas utilizadas\n\n")
    
    if 'r2' in metrics and metrics['r2'] < 0.85:
        report.append("2. **Aumentar R¬≤:**\n")
        report.append("   - Adicionar mais vari√°veis ex√≥genas relevantes\n")
        report.append("   - Aumentar trials de otimiza√ß√£o de hiperpar√¢metros\n")
        report.append("   - Considerar intera√ß√µes entre features\n\n")
    
    if 'mae' in metrics and 'rmse' in metrics:
        ratio = metrics['rmse'] / metrics['mae'] if metrics['mae'] > 0 else 1
        if ratio > 1.5:
            report.append("3. **Reduzir Outliers nos Erros:**\n")
            report.append(f"   - A diferen√ßa entre RMSE ({metrics['rmse']:.2f}) e MAE ({metrics['mae']:.2f}) ")
            report.append(f"indica presen√ßa de erros grandes em alguns per√≠odos\n")
            report.append("   - Investigar per√≠odos espec√≠ficos com maior erro\n")
            report.append("   - Considerar tratamento de outliers durante treinamento\n\n")
    
    return "".join(report)

def analyze_features_detailed(feature_analysis: Dict[str, Any]) -> str:
    """Gera an√°lise detalhada das vari√°veis ex√≥genas."""
    
    report = []
    report.append("## üîç AN√ÅLISE DETALHADA DAS VARI√ÅVEIS EX√ìGENAS\n")
    
    if not feature_analysis:
        report.append("An√°lise de import√¢ncia de features n√£o dispon√≠vel.\n")
        return "".join(report)
    
    # Import√¢ncia relativa
    if 'relative_importance' in feature_analysis and feature_analysis['relative_importance']:
        report.append("### Import√¢ncia Relativa das Features\n")
        report.append("A import√¢ncia relativa indica a contribui√ß√£o percentual de cada vari√°vel ")
        report.append("ex√≥gena para as previs√µes do modelo.\n\n")
        
        sorted_features = sorted(feature_analysis['relative_importance'].items(), 
                               key=lambda x: x[1], reverse=True)
        
        for i, (feature, importance) in enumerate(sorted_features, 1):
            report.append(f"{i}. **{feature}**: {importance:.2f}%\n")
            if importance > 20:
                report.append(f"   - Esta vari√°vel tem alta import√¢ncia ({importance:.2f}%), ")
                report.append("indicando forte contribui√ß√£o para as previs√µes. ")
                report.append("Deve ser mantida no modelo.\n")
            elif importance > 10:
                report.append(f"   - Esta vari√°vel tem import√¢ncia moderada ({importance:.2f}%), ")
                report.append("contribuindo significativamente para as previs√µes.\n")
            else:
                report.append(f"   - Esta vari√°vel tem import√¢ncia baixa ({importance:.2f}%). ")
                report.append("Pode ser considerada para remo√ß√£o em an√°lises futuras, ")
                report.append("mas ainda contribui para o modelo.\n")
        
        report.append("\n")
    
    # Correla√ß√£o com target
    if 'correlation_analysis' in feature_analysis and feature_analysis['correlation_analysis']:
        report.append("### Correla√ß√£o das Features com a Vari√°vel Alvo\n")
        report.append("A correla√ß√£o indica o grau de associa√ß√£o linear entre cada vari√°vel ex√≥gena ")
        report.append("e o n√∫mero de casos criminais.\n\n")
        
        sorted_corr = sorted(feature_analysis['correlation_analysis'].items(), 
                           key=lambda x: abs(x[1]), reverse=True)
        
        for feature, corr in sorted_corr:
            report.append(f"- **{feature}**: {corr:.4f}\n")
            if abs(corr) > 0.7:
                report.append(f"  - Correla√ß√£o muito forte (|r| > 0.7). Esta vari√°vel est√° ")
                report.append("fortemente associada com o n√∫mero de casos criminais.\n")
            elif abs(corr) > 0.5:
                report.append(f"  - Correla√ß√£o forte (0.5 < |r| ‚â§ 0.7). Associa√ß√£o significativa ")
                report.append("com o target.\n")
            elif abs(corr) > 0.3:
                report.append(f"  - Correla√ß√£o moderada (0.3 < |r| ‚â§ 0.5). Associa√ß√£o moderada ")
                report.append("com o target.\n")
            else:
                report.append(f"  - Correla√ß√£o fraca (|r| ‚â§ 0.3). Apesar da correla√ß√£o ser baixa, ")
                report.append("a vari√°vel pode ainda contribuir quando combinada com outras features.\n")
        
        report.append("\n")
    
    # An√°lise de contribui√ß√£o
    if 'contribution_analysis' in feature_analysis and feature_analysis['contribution_analysis']:
        report.append("### An√°lise de Contribui√ß√£o Individual\n")
        report.append("Esta an√°lise mostra como cada vari√°vel contribui individualmente para as previs√µes.\n\n")
        
        for feature, contrib in feature_analysis['contribution_analysis'].items():
            report.append(f"**{feature}:**\n")
            if isinstance(contrib, dict):
                if 'coefficient' in contrib:
                    report.append(f"- Coeficiente: {contrib['coefficient']:.6f}\n")
                if 'average_contribution' in contrib:
                    report.append(f"- Contribui√ß√£o M√©dia: {contrib['average_contribution']:.2f}\n")
                if 'feature_mean' in contrib:
                    report.append(f"- Valor M√©dio da Feature: {contrib['feature_mean']:.2f}\n")
            report.append("\n")
    
    return "".join(report)

def analyze_data_statistics(actual_data_path: str = None, 
                            forecast: pd.DataFrame = None) -> str:
    """Gera an√°lise estat√≠stica detalhada dos dados."""
    
    report = []
    report.append("## üìà AN√ÅLISE ESTAT√çSTICA DOS DADOS\n")
    
    # Carregar dados reais
    actual_data = None
    if actual_data_path and Path(actual_data_path).exists():
        actual_data = pd.read_csv(actual_data_path)
    elif forecast is not None and 'y' in forecast.columns:
        actual_data = forecast[['ds', 'y']].copy()
        actual_data = actual_data[actual_data['y'].notna()]
    
    if actual_data is not None and 'y' in actual_data.columns:
        data = actual_data['y']
        
        report.append("### Estat√≠sticas Descritivas da S√©rie Temporal\n\n")
        report.append("A an√°lise estat√≠stica dos dados permite entender a variabilidade, tend√™ncia ")
        report.append("e caracter√≠sticas da s√©rie temporal de casos criminais.\n\n")
        
        mean_val = data.mean()
        std_val = data.std()
        min_val = data.min()
        max_val = data.max()
        median_val = data.median()
        cv = (std_val / mean_val) * 100 if mean_val > 0 else 0
        
        report.append(f"- **M√©dia:** {mean_val:.2f} casos/m√™s\n")
        report.append(f"- **Desvio Padr√£o:** {std_val:.2f} casos/m√™s\n")
        report.append(f"- **M√≠nimo:** {min_val:.0f} casos (observado em um m√™s espec√≠fico)\n")
        report.append(f"- **M√°ximo:** {max_val:.0f} casos (observado em um m√™s espec√≠fico)\n")
        report.append(f"- **Mediana:** {median_val:.2f} casos/m√™s\n")
        report.append(f"- **Coeficiente de Varia√ß√£o:** {cv:.2f}%\n")
        
        report.append("\n**Interpreta√ß√£o:**\n")
        report.append(f"- A m√©dia de {mean_val:.0f} casos/m√™s indica o n√≠vel t√≠pico de casos criminais ")
        report.append("no per√≠odo analisado.\n")
        
        if cv < 15:
            report.append(f"- Com coeficiente de varia√ß√£o de {cv:.2f}%, a s√©rie apresenta **baixa variabilidade**, ")
            report.append("indicando que os casos criminais s√£o relativamente est√°veis ao longo do tempo. ")
            report.append("Isso √© favor√°vel para modelos de previs√£o, pois h√° menor incerteza na s√©rie.\n")
        elif cv < 30:
            report.append(f"- Com coeficiente de varia√ß√£o de {cv:.2f}%, a s√©rie apresenta **variabilidade moderada**. ")
            report.append("A variabilidade est√° dentro de faixas esperadas para s√©ries temporais criminais, ")
            report.append("que naturalmente apresentam flutua√ß√µes devido a fatores sazonais e eventos externos.\n")
        else:
            report.append(f"- Com coeficiente de varia√ß√£o de {cv:.2f}%, a s√©rie apresenta **alta variabilidade**. ")
            report.append("Isso indica que os casos criminais variam significativamente ao longo do tempo, ")
            report.append("tornando a previs√£o mais desafiadora mas ainda fact√≠vel com modelos apropriados.\n")
        
        # An√°lise de tend√™ncia
        if 'ds' in actual_data.columns:
            actual_data['ds'] = pd.to_datetime(actual_data['ds'])
            actual_data = actual_data.sort_values('ds')
            
            # Calcular tend√™ncia simples (regress√£o linear)
            x = np.arange(len(actual_data))
            y = actual_data['y'].values
            coeffs = np.polyfit(x, y, 1)
            trend_slope = coeffs[0]
            
            report.append("\n### An√°lise de Tend√™ncia\n\n")
            
            if trend_slope > 0:
                report.append(f"- **Tend√™ncia Crescente:** A s√©rie apresenta tend√™ncia crescente de ")
                report.append(f"aproximadamente {trend_slope:.2f} casos por m√™s ao longo do per√≠odo.\n")
                report.append("Isso indica que h√° um padr√£o de aumento gradual no n√∫mero de casos criminais ")
                report.append("ao longo do tempo analisado. Esta tend√™ncia foi capturada pelo modelo Prophet, ")
                report.append("que possui componentes espec√≠ficos para modelar crescimento.\n")
            elif trend_slope < 0:
                report.append(f"- **Tend√™ncia Decrescente:** A s√©rie apresenta tend√™ncia decrescente de ")
                report.append(f"aproximadamente {abs(trend_slope):.2f} casos por m√™s ao longo do per√≠odo.\n")
                report.append("Isso indica que h√° um padr√£o de redu√ß√£o gradual no n√∫mero de casos criminais. ")
                report.append("Esta tend√™ncia foi adequadamente capturada pelo modelo.\n")
            else:
                report.append("- **Tend√™ncia Est√°vel:** A s√©rie n√£o apresenta tend√™ncia clara, mantendo-se ")
                report.append("relativamente est√°vel ao longo do per√≠odo.\n")
    
    return "".join(report)

def analyze_components_detailed(forecast: pd.DataFrame = None) -> str:
    """Gera an√°lise detalhada dos componentes do modelo Prophet."""
    
    report = []
    report.append("## üî¨ AN√ÅLISE DETALHADA DOS COMPONENTES DO MODELO\n")
    
    if forecast is None:
        report.append("Dados de forecast n√£o dispon√≠veis para an√°lise de componentes.\n")
        return "".join(report)
    
    report.append("O modelo Prophet decomp√µe a s√©rie temporal em componentes principais: tend√™ncia, ")
    report.append("sazonalidade e efeitos de vari√°veis ex√≥genas. A an√°lise desses componentes permite ")
    report.append("entender como cada aspecto contribui para as previs√µes.\n\n")
    
    # An√°lise de tend√™ncia
    if 'trend' in forecast.columns:
        trend = forecast['trend'].dropna()
        if len(trend) > 0:
            report.append("### Componente de Tend√™ncia\n\n")
            report.append(f"- **Valor Inicial:** {trend.iloc[0]:.2f} casos\n")
            report.append(f"- **Valor Final:** {trend.iloc[-1]:.2f} casos\n")
            
            trend_change = trend.iloc[-1] - trend.iloc[0]
            trend_change_pct = (trend_change / trend.iloc[0]) * 100 if trend.iloc[0] > 0 else 0
            
            report.append(f"- **Varia√ß√£o Total:** {trend_change:.2f} casos ({trend_change_pct:+.2f}%)\n")
            
            report.append("\n**Interpreta√ß√£o:**\n")
            if abs(trend_change_pct) > 10:
                report.append(f"- A tend√™ncia apresentou varia√ß√£o significativa ({trend_change_pct:+.2f}%) ao longo ")
                report.append("do per√≠odo. Este √© um padr√£o importante que foi capturado pelo modelo Prophet, ")
                report.append("que utiliza changepoints para identificar mudan√ßas na tend√™ncia.\n")
            else:
                report.append("- A tend√™ncia permaneceu relativamente est√°vel, indicando que n√£o h√° mudan√ßas ")
                report.append("dram√°ticas no n√≠vel base de casos criminais ao longo do tempo.\n")
            
            report.append("- O componente de tend√™ncia representa a linha de base da s√©rie temporal, ")
            report.append("descontando efeitos sazonais e de vari√°veis ex√≥genas. Um modelo com boa ")
            report.append("captura de tend√™ncia √© essencial para previs√µes de longo prazo.\n\n")
    
    # An√°lise de sazonalidade semanal
    if 'weekly' in forecast.columns:
        weekly = forecast['weekly'].dropna()
        if len(weekly) > 0:
            report.append("### Componente de Sazonalidade Semanal\n\n")
            weekly_range = weekly.max() - weekly.min()
            weekly_std = weekly.std()
            
            report.append(f"- **Amplitude:** {weekly_range:.2f} casos\n")
            report.append(f"- **Desvio Padr√£o:** {weekly_std:.2f} casos\n")
            
            report.append("\n**Interpreta√ß√£o:**\n")
            if weekly_range > 100:
                report.append("- O componente semanal apresenta amplitude significativa, indicando que h√° ")
                report.append("varia√ß√µes sistem√°ticas dos casos criminais ao longo dos dias da semana. ")
                report.append("Este padr√£o pode estar relacionado a fatores como padr√µes de atividade criminal ")
                report.append("ou disponibilidade de recursos de seguran√ßa em diferentes dias.\n")
            elif weekly_range > 50:
                report.append("- O componente semanal apresenta amplitude moderada, sugerindo varia√ß√µes ")
                report.append("sistem√°ticas mas n√£o extremas ao longo da semana.\n")
            else:
                report.append("- O componente semanal apresenta amplitude baixa, indicando que os padr√µes ")
                report.append("semanais t√™m menor impacto na s√©rie temporal mensal analisada.\n")
            
            report.append("\n")
    
    # An√°lise de sazonalidade anual
    if 'yearly' in forecast.columns:
        yearly = forecast['yearly'].dropna()
        if len(yearly) > 0:
            report.append("### Componente de Sazonalidade Anual\n\n")
            yearly_range = yearly.max() - yearly.min()
            yearly_std = yearly.std()
            
            report.append(f"- **Amplitude:** {yearly_range:.2f} casos\n")
            report.append(f"- **Desvio Padr√£o:** {yearly_std:.2f} casos\n")
            
            report.append("\n**Interpreta√ß√£o:**\n")
            if yearly_range > 500:
                report.append("- O componente anual apresenta amplitude muito significativa, indicando ")
                report.append("fortes padr√µes sazonais anuais nos casos criminais. Isso √© esperado, ")
                report.append("pois eventos como f√©rias, festivais e padr√µes econ√¥micos variam ao longo ")
                report.append("do ano e podem influenciar a criminalidade.\n")
            elif yearly_range > 200:
                report.append("- O componente anual apresenta amplitude significativa, indicando padr√µes ")
                report.append("sazonais anuais claros. Estes padr√µes foram adequadamente capturados pelo ")
                report.append("modelo Prophet atrav√©s de sua componente de sazonalidade anual.\n")
            else:
                report.append("- O componente anual apresenta amplitude moderada, sugerindo que os ")
                report.append("padr√µes sazonais anuais existem mas n√£o s√£o extremamente pronunciados.\n")
            
            report.append("- Para s√©ries mensais de casos criminais, a sazonalidade anual √© um componente ")
            report.append("crucial, pois eventos e condi√ß√µes que influenciam a criminalidade frequentemente ")
            report.append("se repetem anualmente (ex: festas de fim de ano, per√≠odos de f√©rias escolares, etc.).\n\n")
    
    return "".join(report)

def analyze_cross_validation_results(cv_results: Dict[str, Any] = None) -> str:
    """Gera an√°lise detalhada dos resultados de valida√ß√£o cruzada."""
    
    report = []
    report.append("## ‚úÖ AN√ÅLISE DE VALIDA√á√ÉO CRUZADA TEMPORAL\n")
    
    if not cv_results:
        report.append("Resultados de valida√ß√£o cruzada n√£o dispon√≠veis para an√°lise detalhada.\n")
        report.append("A valida√ß√£o cruzada temporal foi executada durante o treinamento, mas m√©tricas ")
        report.append("detalhadas por fold n√£o foram salvas para an√°lise individual.\n")
        return "".join(report)
    
    report.append("A valida√ß√£o cruzada temporal (TimeSeriesSplit) √© essencial para avaliar a robustez ")
    report.append("do modelo em diferentes per√≠odos temporais, garantindo que o modelo n√£o esteja ")
    report.append("super-ajustado a um per√≠odo espec√≠fico.\n\n")
    
    report.append("**Metodologia Aplicada:**\n")
    report.append("- Divis√£o temporal dos dados em m√∫ltiplos folds\n")
    report.append("- Treinamento em dados hist√≥ricos e teste em per√≠odos posteriores\n")
    report.append("- Respeito √† ordem temporal (sem vazamento de dados futuros)\n")
    report.append("- Avalia√ß√£o em m√∫ltiplos per√≠odos para verificar estabilidade do modelo\n\n")
    
    return "".join(report)

def analyze_model_diagnostics(metrics: Dict[str, float],
                               forecast: pd.DataFrame = None) -> str:
    """Gera an√°lise detalhada dos diagn√≥sticos do modelo."""
    
    report = []
    report.append("## ü©∫ DIAGN√ìSTICO DETALHADO DO MODELO\n")
    
    # An√°lise comparativa entre m√©tricas
    report.append("### An√°lise Comparativa entre M√©tricas\n\n")
    
    if 'mae' in metrics and 'rmse' in metrics:
        mae = metrics['mae']
        rmse = metrics['rmse']
        ratio = rmse / mae if mae > 0 else 1
        
        report.append("A compara√ß√£o entre MAE e RMSE oferece insights sobre a distribui√ß√£o dos erros:\n\n")
        report.append(f"- **MAE:** {mae:.2f} casos\n")
        report.append(f"- **RMSE:** {rmse:.2f} casos\n")
        report.append(f"- **Raz√£o RMSE/MAE:** {ratio:.3f}\n")
        
        report.append("\n**Interpreta√ß√£o da Raz√£o RMSE/MAE:**\n")
        if ratio < 1.2:
            report.append(f"- Com raz√£o de {ratio:.3f}, os erros s√£o relativamente uniformes. O fato de ")
            report.append("RMSE ser pr√≥ximo ao MAE indica que n√£o h√° muitos outliers extremos nos erros ")
            report.append("de previs√£o. O modelo apresenta erros consistentes em diferentes per√≠odos.\n")
        elif ratio < 1.5:
            report.append(f"- Com raz√£o de {ratio:.3f}, h√° algumas previs√µes com erro maior, mas a maioria ")
            report.append("das previs√µes apresenta erro moderado. A diferen√ßa entre RMSE e MAE indica ")
            report.append("presen√ßa de alguns per√≠odos com maior erro, mas n√£o de forma extrema.\n")
        else:
            report.append(f"- Com raz√£o de {ratio:.3f}, h√° presen√ßa de alguns per√≠odos com erro significativamente ")
            report.append("maior que a m√©dia. Isso pode indicar que certos eventos ou condi√ß√µes espec√≠ficas ")
            report.append("s√£o mais dif√≠ceis de prever. Recomenda-se investigar esses per√≠odos espec√≠ficos ")
            report.append("para identificar poss√≠veis causas (ex: eventos extraordin√°rios, mudan√ßas de pol√≠tica, etc.).\n")
        
        report.append("\n")
    
    # An√°lise de consist√™ncia das m√©tricas
    report.append("### Consist√™ncia e Coer√™ncia das M√©tricas\n\n")
    
    all_consistent = True
    if 'mae' in metrics and 'rmse' in metrics and 'r2' in metrics:
        mae_val = metrics['mae']
        rmse_val = metrics['rmse']
        r2_val = metrics['r2']
        
        report.append("**Verifica√ß√£o de Consist√™ncia:**\n")
        
        # Verificar se MAE < RMSE (deve ser sempre verdade)
        if mae_val < rmse_val:
            report.append("‚úÖ **MAE < RMSE:** Correto. O RMSE √© sempre maior ou igual ao MAE, pois penaliza ")
            report.append("mais erros grandes. Este resultado confirma que os c√°lculos est√£o corretos.\n")
        else:
            report.append("‚ö†Ô∏è **Inconsist√™ncia Detectada:** MAE >= RMSE, o que n√£o √© esperado.\n")
            all_consistent = False
        
        # Verificar coer√™ncia entre R¬≤ e erros
        if r2_val > 0.8 and rmse_val < mae_val * 2:
            report.append("‚úÖ **Coer√™ncia R¬≤ vs Erros:** Com R¬≤ alto (boa explica√ß√£o de vari√¢ncia) e erros ")
            report.append("moderados, as m√©tricas s√£o coerentes entre si. O modelo apresenta boa capacidade ")
            report.append("preditiva em m√∫ltiplas dimens√µes.\n")
        
        report.append("\n")
    
    # An√°lise de robustez
    report.append("### An√°lise de Robustez do Modelo\n\n")
    
    report.append("A robustez do modelo refere-se √† sua capacidade de manter boa performance mesmo quando ")
    report.append("testado em per√≠odos diferentes daqueles utilizados no treinamento.\n\n")
    
    if 'mape' in metrics and 'r2' in metrics:
        mape_val = metrics['mape']
        r2_val = metrics['r2']
        
        if r2_val > 0.85 and mape_val < 15:
            report.append("**Conclus√£o sobre Robustez:**\n")
            report.append(f"- Com R¬≤ de {r2_val:.4f} e MAPE de {mape_val:.2f}%, o modelo demonstra **robustez** ")
            report.append("adequada. As m√©tricas indicam que o modelo captura padr√µes gerais da s√©rie temporal ")
            report.append("que s√£o v√°lidos em diferentes per√≠odos, n√£o apenas no per√≠odo de treinamento.\n")
        elif r2_val > 0.75:
            report.append("**Conclus√£o sobre Robustez:**\n")
            report.append(f"- Com R¬≤ de {r2_val:.4f}, o modelo apresenta robustez moderada. H√° indica√ß√µes de ")
            report.append("que o modelo captura os principais padr√µes, mas pode se beneficiar de ajustes para ")
            report.append("melhor adapta√ß√£o a diferentes per√≠odos.\n")
        else:
            report.append("**Conclus√£o sobre Robustez:**\n")
            report.append(f"- A robustez do modelo pode ser melhorada. Recomenda-se investigar se h√° mudan√ßas ")
            report.append("estruturais nos dados ou se o modelo precisa de mais vari√°veis explicativas.\n")
    
    return "".join(report)

def generate_full_report(metrics_path: str, forecast_path: str = None,
                        feature_analysis_path: str = None,
                        feature_analysis: Dict[str, Any] = None) -> str:
    """Gera relat√≥rio completo e detalhado."""
    
    # Carregar resultados
    results = load_results(metrics_path, forecast_path, None, feature_analysis_path)
    metrics = results.get('metrics', {})
    forecast = results.get('forecast')
    
    # Usar feature_analysis do par√¢metro ou do arquivo carregado
    if feature_analysis is None:
        feature_analysis = results.get('feature_analysis', {})
    
    # Construir relat√≥rio
    report = []
    
    report.append("# RELAT√ìRIO T√âCNICO DETALHADO - PIPELINE PROPHET CASOS CRIMINAIS TJGO\n\n")
    report.append(f"**Data de Gera√ß√£o:** {datetime.now().strftime('%d de %B de %Y, %H:%M:%S')}\n\n")
    report.append("---\n\n")
    
    # Carregar dados reais para an√°lises
    actual_data_path = "data/raw_data/casos_mensal__criminal_series_2015_2024.csv"
    
    # An√°lise estat√≠stica dos dados
    report.append(analyze_data_statistics(actual_data_path, forecast))
    report.append("\n\n---\n\n")
    
    # An√°lise de m√©tricas (usar forecast como proxy para actual_data se necess√°rio)
    report.append(analyze_metrics_detailed(metrics, forecast, forecast_path))
    report.append("\n\n---\n\n")
    
    # An√°lise de componentes do modelo
    report.append(analyze_components_detailed(forecast))
    report.append("\n\n---\n\n")
    
    # Diagn√≥stico do modelo
    report.append(analyze_model_diagnostics(metrics, forecast))
    report.append("\n\n---\n\n")
    
    # An√°lise de performance
    report.append(analyze_model_performance(metrics, feature_analysis))
    report.append("\n\n---\n\n")
    
    # An√°lise de features
    if feature_analysis:
        report.append(analyze_features_detailed(feature_analysis))
        report.append("\n\n---\n\n")
    
    # An√°lise de valida√ß√£o cruzada
    report.append(analyze_cross_validation_results(None))
    report.append("\n\n---\n\n")
    
    # Conclus√µes
    report.append("## üìã CONCLUS√ïES E RECOMENDA√á√ïES FINAIS\n\n")
    
    if 'r2' in metrics and metrics['r2'] >= 0.90 and 'mape' in metrics and metrics['mape'] < 10:
        report.append("### Conclus√£o Geral\n\n")
        report.append("O modelo Prophet implementado demonstra **desempenho excepcional** para previs√£o ")
        report.append("de casos criminais. Com R¬≤ acima de 90% e MAPE abaixo de 10%, o modelo apresenta ")
        report.append("excelente capacidade preditiva e pode ser confiantemente utilizado para previs√µes ")
        report.append("e planejamento estrat√©gico.\n\n")
    elif 'r2' in metrics and metrics['r2'] >= 0.80:
        report.append("### Conclus√£o Geral\n\n")
        report.append("O modelo Prophet implementado demonstra **desempenho muito bom** para previs√£o ")
        report.append("de casos criminais. Com R¬≤ acima de 80%, o modelo captura adequadamente os ")
        report.append("padr√µes temporais e pode ser utilizado para previs√µes com boa confiabilidade.\n\n")
    else:
        report.append("### Conclus√£o Geral\n\n")
        report.append("O modelo Prophet implementado demonstra **desempenho adequado** para previs√£o ")
        report.append("de casos criminais. H√° espa√ßo para melhorias atrav√©s de ajustes nos hiperpar√¢metros ")
        report.append("ou inclus√£o de vari√°veis adicionais.\n\n")
    
    report.append("### Pr√≥ximos Passos Recomendados\n\n")
    report.append("1. **Monitoramento Cont√≠nuo:** Acompanhar a performance do modelo ao longo do tempo\n")
    report.append("2. **Retreinamento Peri√≥dico:** Atualizar o modelo com dados mais recentes\n")
    report.append("3. **Valida√ß√£o com Dados Novos:** Testar o modelo em per√≠odos futuros\n")
    report.append("4. **Refinamento Cont√≠nuo:** Ajustar hiperpar√¢metros conforme mais dados ficam dispon√≠veis\n\n")
    
    return "".join(report)

if __name__ == "__main__":
    # Encontrar arquivos mais recentes
    outputs_dir = Path("outputs/reports")
    metrics_files = list(outputs_dir.glob("metrics_*.json"))
    
    if metrics_files:
        latest_metrics = max(metrics_files, key=lambda x: x.stat().st_mtime)
        forecast_files = list(Path("outputs/predictions").glob("forecast_*.csv"))
        latest_forecast = max(forecast_files, key=lambda x: x.stat().st_mtime) if forecast_files else None
        
        # Buscar an√°lise de features
        feature_files = list(outputs_dir.glob("feature_analysis_*.json"))
        latest_feature_analysis = max(feature_files, key=lambda x: x.stat().st_mtime) if feature_files else None
        
        print(f"Gerando relat√≥rio detalhado...")
        print(f"M√©tricas: {latest_metrics}")
        if latest_forecast:
            print(f"Previs√µes: {latest_forecast}")
        if latest_feature_analysis:
            print(f"An√°lise de Features: {latest_feature_analysis}")
        
        report = generate_full_report(
            str(latest_metrics), 
            str(latest_forecast) if latest_forecast else None,
            str(latest_feature_analysis) if latest_feature_analysis else None
        )
        
        # Salvar relat√≥rio
        report_path = outputs_dir / f"RELATORIO_DETALHADO_COMPLETO_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\n‚úÖ Relat√≥rio detalhado gerado: {report_path}")
    else:
        print("Nenhum arquivo de m√©tricas encontrado. Execute o pipeline primeiro.")

